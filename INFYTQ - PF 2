ASSIGNMENT 32
DAY 32

temp=[]
z=''
temp=patient_medical_speciality_list[1::2]
z=max(temp)
speciality=medical_speciality[z]

DAY 5

coll Ass 26:

#PF-Exer-26

def factorial(number):
    reverse=0
    temp=0
    si=1
    if number!=0:
        while(number>0):
            rem=number%10
            reverse=reverse*10+rem
            number=number//10
            si=1
            for i in range(reverse):
                si=si*reverse
                reverse-=1
            temp+=si
        return temp
    else:
        temp=1
        return temp
    
    


def find_strong_numbers(num_list):
    strong_num_list=[]
    for i in num_list:
        if factorial(i)==i:
            strong_num_list.append(i)
    return strong_num_list
        


num_list=[145,375,100,2,10]
strong_num_list=find_strong_numbers(num_list)
print(strong_num_list)




##########################################################################################################

EXercise 29:

#PF-Exer-29
def merge_lists(list1,list2):
    #Write your logic here
    for i in list2:
        list1.append(i)
        new_merge_list=list1
        

    return new_merge_list
def sort_list(merged_list):
    merged_list=sorted(merged_list)

    return merged_list

#Provide different values for list1 and list2 and test your program
merged_list=merge_lists(list1=[1,2,3,4,1] ,list2=[2,3,4,5,4,6])
print(merged_list)
sorted_merged_list=sort_list(merged_list)
print(sorted_merged_list)


#######################################################################################################################

day 5 ass 36:

#PF-Assgn-36
def create_largest_number(number_list):
    num=[]
    num=number_list.sort()
    res = ""
    for num in number_list:
        res = str(num) + res

    return (int(res))
        

number_list=[87,66,11]
largest_number=create_largest_number(number_list)
print(largest_number)
        
        
    

number_list=[23,45,67]
largest_number=create_largest_number(number_list)
print(largest_number)


##############################################################################################################################


























