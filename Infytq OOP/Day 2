Assignment 11:

#OOPR-Assgn-11
#Start writing your code here
class Flower:
    
    def __init__(self):
        self.__flower_name = None
        self.__price_per_kg = None
        self.__stock_available = None
        
    def set_flower_name(self, flower_name):
        self.__flower_name = flower_name
        
    def set_price_per_kg(self, price_per_kg):
        self.__price_per_kg = price_per_kg
    
    def set_stock_available(self, stock_available):
        self.__stock_available = stock_available
        
    def get_flower_name(self):
        return self.__flower_name
        
    def get_price_per_kg(self):
        return self.__price_per_kg
        
    def get_stock_available(self):
        return self.__stock_available
        
    def validate_flower(self):
        list_of_flower = ['ORCHID', 'ROSE', 'JASMINE']
        if self.__flower_name.upper() in list_of_flower:
            return True
        else:
            return False
            
    def validate_stock(self,required_quantity):
        if  required_quantity <= self.__stock_available:
            return True
        else:
            return False
            
            
    def sell_flower(self,required_quantity):
        if self.validate_flower()==True and self.validate_stock(required_quantity)==True:
            if self.__flower_name.upper() == 'ORCHID':
                self.__stock_available = self.__stock_available - required_quantity
                return self.__stock_available
            elif self.__flower_name.upper() == 'ROSE':
                self.__stock_available = self.__stock_available - required_quantity
                return self.__stock_available
            elif self.__flower_name.upper() == 'JASMINE':
                self.__stock_available = self.__stock_available - required_quantity
                return self.__stock_available
                
    def check_level(self):
        if self.__flower_name.upper() == 'ORCHID':
            if self.__stock_available < 15:
                return True
            else:
                return False
                
        elif self.__flower_name.upper() == 'ROSE':
            if self.__stock_available < 25:
                return True
            else:
                return False
                
        elif self.__flower_name.upper() == 'JASMINE':
            if self.__stock_available < 40:
                return True
            else:
                return False
                
        else:
            return False
                
                
                
f1 = Flower()
f1.set_flower_name("Rose")
f1.set_price_per_kg(40)
f1.set_stock_available(15)
f1.get_flower_name()
f1.get_price_per_kg()
f1.get_stock_available()

f1.sell_flower(10)
print(f1.check_level())
        
        #########################################################################################

assignment 12:

#OOPR-Assgn-12
#Start writing your code here
class Bill:
    
    def __init__(self, bill_id, patient_name):
        self.__bill_id = bill_id
        self.__patient_name = patient_name
        self.__bill_amount = 0
        
    def calculate_bill_amount(self,consultation_fees, quantity_list, price_list):
        
        for i in range(len(quantity_list)):
            self.__bill_amount += (quantity_list[i]*price_list[i])
        self.__bill_amount += consultation_fees
        return self.__bill_amount
            
    def get_bill_id(self):
        return self.__bill_id
        
    def get_patient_name(self):
        return self.__patient_name
        
    def get_bill_amount(self):
        return self.__bill_amount
        


b1 = Bill(101, "ssvk")
b1.calculate_bill_amount(150,[1,2,3,4,5,6],[50,60,70,70,60,75])
print(b1.get_bill_id())
print(b1.get_patient_name())
print(b1.get_bill_amount())


############################################################################################################################

Assignment 13:

#OOPR-Assgn-13
#Start writing your code here

class Classroom:
    
    classroom_list = ['A', 'B', 'C', 'D']
    
    @staticmethod
    def search_classroom(class_room):
        if class_room.upper() in Classroom.classroom_list:
            return 'Found'
            
        else: 
            return -1
            
c1 = Classroom()
print(c1.search_classroom('b'))

############################################################################################################################



        
            
        
        
        
    
    
    
    
