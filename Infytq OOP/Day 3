#OOPR-Assgn-15
#Start writing your code here

class Parrot:
    
    __counter = 7000
    
    def __init__(self, name, color):
        self.__name = name
        self.__color = color
        Parrot.__counter += 1
        self.__unique_number = Parrot.__counter
        
        
    def get_name(self):
        return self.__name
        
    def get_color(self):
        return self.__color

    def get_unique_number(self):
        return self.__unique_number
        
p1 = Parrot("ram", "green")
print(p1.get_name())
print(p1.get_color())
print(p1.get_unique_number())
#####################################################################################################################


Assignment 17:

#OOPR-Assgn-17
#Start writing your code here
class Customer:
    
    def __init__(self, customer_id, customer_name, address):
        self.__customer_id = customer_id
        self.__customer_name = customer_name
        self.__address = address
        
    def validate_customer_id(self):
        convert = str(self.__customer_id)
        
        if len(convert) == 6 and convert[0] == '1':
            return True
        else:
            return False
            
    def get_customer_id(self):
        return self.__customer_id
        
    def get_customer_name(self):
        return self.__customer_name
        
    def get_address(self):
        return self.__address
        
class Freight:
    
    counter = 198
    def __init__(self, recipient_customer, from_customer, weight, distance):
        
        self.__freight_id = None
        self.__recipient_customer = recipient_customer
        self.__from_customer = from_customer
        self.__weight = weight
        self.__distance = distance
        self.__freight_charge = 0
        
    def validate_weight(self):
        if self.__weight % 5 == 0:
            return True
        else:
            return False
            
    def validate_distance(self):
        if self.__distance>=500 and self.__distance<=5000:
            return True
        else:
            return False
            
    def forward_cargo(self):
        if Customer.validate_customer_id(self.__from_customer) and Customer.validate_customer_id(self.__recipient_customer) and self.validate_distance() and self.validate_weight():
            self.__freight_id = Freight.counter+2
            self.__freight_charge = (self.__distance * 60) + (self.__weight * 150)
            return self.__freight_charge
            return self.__freight_id
        else:
            self.__freight_charge = 0
            return self.__freight_charge
            
    def get_freight_charge(self):
        return self.__freight_charge
        
    def get_freight_id(self):
        return self.recipient_customer
    
    def get_recipient_customer(self):
        self.__recipient_customer
    def get_from_customer(self):
        self.__from_customer
    def get_weight(self):
        self.__weight
    def get_distance(self):
        self.__distance
    
    
 
 
 
 
 
 
c1 = Customer(123456, "SSVK", "dubai")
 
 
f1 = Freight(c1, c1, 60, 560)
 
print(f1.forward_cargo())
    
    
            
    #########################################################################################################

