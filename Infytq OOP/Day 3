#OOPR-Assgn-15
#Start writing your code here

class Parrot:
    
    __counter = 7000
    
    def __init__(self, name, color):
        self.__name = name
        self.__color = color
        Parrot.__counter += 1
        self.__unique_number = Parrot.__counter
        
        
    def get_name(self):
        return self.__name
        
    def get_color(self):
        return self.__color

    def get_unique_number(self):
        return self.__unique_number
        
p1 = Parrot("ram", "green")
print(p1.get_name())
print(p1.get_color())
print(p1.get_unique_number())
#####################################################################################################################


Assignment 17:

#OOPR-Assgn-17
#Start writing your code here
class Customer:
    
    def __init__(self, customer_id, customer_name, address):
        self.__customer_id = customer_id
        self.__customer_name = customer_name
        self.__address = address
        
    def validate_customer_id(self):
        convert = str(self.__customer_id)
        
        if len(convert) == 6 and convert[0] == '1':
            return True
        else:
            return False
            
    def get_customer_id(self):
        return self.__customer_id
        
    def get_customer_name(self):
        return self.__customer_name
        
    def get_address(self):
        return self.__address
        
class Freight:
    
    counter = 198
    def __init__(self, recipient_customer, from_customer, weight, distance):
        
        self.__freight_id = None
        self.__recipient_customer = recipient_customer
        self.__from_customer = from_customer
        self.__weight = weight
        self.__distance = distance
        self.__freight_charge = 0
        
    def validate_weight(self):
        if self.__weight % 5 == 0:
            return True
        else:
            return False
            
    def validate_distance(self):
        if self.__distance>=500 and self.__distance<=5000:
            return True
        else:
            return False
            
    def forward_cargo(self):
        if Customer.validate_customer_id(self.__from_customer) and Customer.validate_customer_id(self.__recipient_customer) and self.validate_distance() and self.validate_weight():
            self.__freight_id = Freight.counter+2
            self.__freight_charge = (self.__distance * 60) + (self.__weight * 150)
            return self.__freight_charge
            return self.__freight_id
        else:
            self.__freight_charge = 0
            return self.__freight_charge
            
    def get_freight_charge(self):
        return self.__freight_charge
        
    def get_freight_id(self):
        return self.recipient_customer
    
    def get_recipient_customer(self):
        self.__recipient_customer
    def get_from_customer(self):
        self.__from_customer
    def get_weight(self):
        self.__weight
    def get_distance(self):
        self.__distance
    
    
 
 
 
 
 
 
c1 = Customer(123456, "SSVK", "dubai")
 
 
f1 = Freight(c1, c1, 60, 560)
 
print(f1.forward_cargo())
    
    
            
    #########################################################################################################
    
    
Assignment 18;


items=[]
class Item:
    def __init__(self,item_id,description,price_per_quantity):
        self.__item_id=item_id.upper()
        self.__description=description.upper()
        self.__price_per_quantity=price_per_quantity
        items.append(self)
    def get_item_id(self):
        return self.__item_id
    def get_description(self):
        return self.__description
    def get_price_per_quantity(self):
        return self.__price_per_quantity
        
class Bill:
    counter=1000
    def __init__(self):
        self.__bill_id=1000
        self.__bill_amount=0
    def generate_bill_amount(self,item_quantity, items):
        if not self.__bill_amount:
            for key,value in item_quantity.items():
                for item in items:
                    if item.get_item_id()==key.upper():
                        self.__bill_amount += value*item.get_price_per_quantity()
                        continue
            if self.__bill_amount>0:
                self.__bill_id="B"+str(Bill.counter+1)
                Bill.counter += 1
            
    def get_bill_id(self):
        return self.__bill_id
    def get_bill_amount(self):
        return self.__bill_amount
        
class Customer:
    def __init__(self, customer_name):
        self.__customer_name=customer_name
        self.__payment_status=None
    def pays_bill(self,bill):
        self.__payment_status="Paid"
        print(self.get_customer_name())
        print(bill.get_bill_id())
        print(bill.get_bill_amount())
    def get_customer_name(self):
        return self.__customer_name
    def get_payment_status(self):
        return self.__payment_status
item_quantity = {'Ir987':3, 'IR346':2, 'IR658':4, 'IR123':2}
c=Customer("Omkar")
i1=Item("IR987","Sunfeast Marie",100.0)
i2=Item("ir658","Kellogs Oats",151.0)
i3=Item("Ir346","Maggie Noodles",35.75)
i4=Item("iR234","Kissan Jam",100.0)
i5=Item("IR123","Nescafe",55.5)
i6=Item("IR111","Milk",100.0)




b=Bill()
b.generate_bill_amount(item_quantity,items)
b.generate_bill_amount(item_quantity,items)
b.generate_bill_amount(item_quantity,items)
b.generate_bill_amount(item_quantity,items)
b.generate_bill_amount(item_quantity,items)

c.pays_bill(b)
print(b.get_bill_id())
print(b.get_bill_amount())


############################################################################################################################

Aasignment 20;

#OOPR-Assgn-20
#Start writing your code here
class Applicant:
    
    __applicant_dict = {'A' : 0, 'B' : 0, 'C' : 0}
    __applicant_id_count = 1000
    def __init__(self, applicant_name):
        self.__applicant_id = None
        self.__applicant_name = applicant_name
        self.__job_band = None
        
    def generate_applicant_id(self):
        self.__applicant_id += Applicant.__applicant_id_count
        return self.__applicant_id
        
    def apply_for_job(self, job_band):
        for key,values in Applicant.__applicant_dict.items():
            if key == job_band:
                if items == 5:
                    return -1
                elif items < 5: 
                    self.__job_band=job_band
                    Applicant.__applicant_dict[job_band] += 1
                    
                else:
                    return "Incorrect msg"
        return self.__job_band
        return self.generate_applicant_id()
        
    @staticmethod
    def get_application_dict(self):
        return Applicant.__applicant_dict
        
    def get_applicant_id(self):
        return self.__applicant_id
        
    def get_applicant_name(self):
        return self.__applicant_name
        
    def get_job_band(self):
        return self.__job_band
        
a1 = Applicant("SSVK")
print(a1.apply_for_job("A"))
a1.get_applicant_id()
a1.get_applicant_name()
a1.get_job_band()
    
 #################################################################################################################   
    
        

