Day 2 :
Exercise 6:
#OOPR-Exer-6
#Start writing your code here
class Vehicle:
    
    def __init__(self):
        self.mileage = 20
        self.fuel_left = 12
        self.reversed_fuel = 5
        self.distance_travel = None
        self.distance_covered = None
        
    def identify_distance_that_can_be_travelled(self):
        if self.fuel_left > self.reversed_fuel:
            self.distance_travel = self.mileage * (self.fuel_left - self.reversed_fuel)
            return self.distance_travel
        else:
            return 0
    
    def identify_distance_travelled(self, initial_fuel):
        if initial_fuel > self.fuel_left:
            self.distance_covered = (initial_fuel - self.fuel_left) * self.mileage
            return self.distance_covered
        
v1 = Vehicle()
print(v1.identify_distance_that_can_be_travelled())
print(v1.identify_distance_travelled(50))



##################################################################################################################################

Day 2 - Exercise 7 level 2

class Ticket:

    counter = 0
    def __init__(self,passenger_name,source,destination):
        self.__ticket_id = None
        self.__passenger_name = passenger_name
        self.__source = source
        self.__destination = destination
        Ticket.counter += 1

    def validate_source_destination(self):
        list = ['Mumbai', 'Chennai', 'Pune', 'Kolkata', 'MUMBAI', 'CHENNAI', 'PUNE', 'KOLKATA']
        if self.__source == 'Delhi' or self.__source == 'DELHI' or self.__source == 'delhi':
            if self.__destination in list:
                return True
            else:
                return False

        else:
            return False

    def generate_ticket(self):
        if self.validate_source_destination() == True:
            if Ticket.counter<10:
                self.__ticket_id = self.__source[0:1] + self.__destination[0:1] + str(0) + str(Ticket.counter)
            else:
                self.__ticket_id = self.__source[0:1] + self.__destination[0:1] + str(Ticket.counter)
        else:
            self.__ticket_id = None
            print(self.__ticket_id)

    def get_ticket_id(self):
        return self.__ticket_id

    def get_passenger_name(self):
        return self.__passenger_name

    def get_source(self):
        return self.__source

    def get_destination(self):
        return self.__destination


t1 = Ticket('Sai', 'Delhi', 'Chennai')
t1.generate_ticket()
print(t1.get_ticket_id())
print(t1.get_passenger_name())
print(t1.get_source())
print(t1.get_destination())
t2 = Ticket('Sahith', 'Delhi', 'Mumbai')
t2.generate_ticket()
t3 = Ticket('VK' , 'Delhi', 'Pune')
t3.generate_ticket()


##########################################################################################################################

DAY 5 - Exercise 13:

#OOPR-Exer-13
#Start writing your code here
from abc import ABCMeta, abstractmethod
class DirectToHomeService(metaclass = ABCMeta):
    __counter = 101
    def __init__(self, consumer_name):
        self.__consumer_number = 1000
        self.__consumer_name = consumer_name
        DirectToHomeService.__counter += 1
        
    def get_consumer_number(self):
        return self.__consumer_number
        
    def get_consumer_name(self):
        return self.__consumer_name
        
    @abstractmethod
    def calculate_monthly_rent(self):
        pass
    
    
class BasePackage(DirectToHomeService):
    
    def __init__(self, consumer_name, base_pack_name, subscription_period):
        super().__init__(consumer_name)
        self.__base_pack_name = base_pack_name
        self.__subscription_period = subscription_period
        
    def get_base_pack_name(self):
        return self.__base_pack_name
        
    def get_subscription_period(self):
        return self.__subscription_period
        
    def validate_base_pack_name(self):
        packs = ["Silver", "Gold", "Platinum"]
        if self.__base_pack_name in packs:
            print(self.calculate_monthly_rent())
        else:
            self.__base_pack_name = "Silver"
            print("Base package name is incorrect, set to sliver")
            
    def calculate_monthly_rent(self):
        if 1 <= self.__subscription_period <= 24:
            if self.__base_pack_name == "Silver" and self.__subscription_period > 12:
                monthly_rent = 350.00
                final_monthly_rent = ((monthly_rent * self.__subscription_period) - (monthly_rent)) / self.__subscription_period
                return final_monthly_rent
            
            elif self.__base_pack_name == "Silver" :
                monthly_rent = 350.00
                final_monthly_rent = (monthly_rent * self.__subscription_period)/self.__subscription_period
                return final_monthly_rent
            
            elif self.__base_pack_name == "Gold"and self.__subscription_period > 12:
                monthly_rent = 440.00
                final_monthly_rent = ((monthly_rent * self.__subscription_period) - (monthly_rent))/self.__subscription_period
                return final_monthly_rent
                
            elif self.__base_pack_name == "Gold":
                monthly_rent = 440.00
                final_monthly_rent = (monthly_rent * self.__subscription_period)/self.__subscription_period
                return final_monthly_rent
                
            elif self.__base_pack_name == "Platinum"and self.__subscription_period > 12:
                monthly_rent = 560.00
                final_monthly_rent = ((monthly_rent * self.__subscription_period) - (monthly_rent))/self.__subscription_period
                return final_monthly_rent
                
            elif self.__base_pack_name == "Platinum":
                monthly_rent = 560.00
                final_monthly_rent=(monthly_rent * self.__subscription_period)/self.__subscription_period
                return final_monthly_rent
                
        else:
            return -1
                
b1 = BasePackage("ssvk", "silver",1)
b1.get_consumer_number()
b1.get_consumer_name()
b1.get_base_pack_name()
b1.get_subscription_period()
b1.validate_base_pack_name()
#(b1.calculate_monthly_rent())
                
                
                
                
                
            
            
            
            
            
            
    
        
        
        
        
