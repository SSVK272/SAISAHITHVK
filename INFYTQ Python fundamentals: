DAY 2 : ASS 19:

def calculate_bill_amount(food_type,quantity_ordered,distance_in_kms):
    bill_amount=0
     if food_type=='V':
        if quantity_ordered>0:
            if distance_in_kms>6:
                bill_amount=quantity_ordered*120+((distance_in_kms-6)*6)+9
            elif distance_in_kms>3:
                bill_amount=quantity_ordered*120+((distance_in_kms-3)*3)
            elif distance_in_kms>0:
                bill_amount=(quantity_ordered*120)
            else:
                bill_amount=-1
        else:
            bill_amount=-1
            
    elif food_type=='N':
        if quantity_ordered>0:
            if distance_in_kms>6:
                bill_amount=quantity_ordered*150+((distance_in_kms-6)*6)+9
            elif distance_in_kms>3:
                bill_amount=quantity_ordered*150+((distance_in_kms-3)*3)
            elif distance_in_kms>0:
                bill_amount=quantity_ordered*150
                
            else:
                bill_amount=-1
        else:
            bill_amount=-1
            
    else:
        bill_amount=-1
            
    return bill_amount

#Provide different values for food_type,quantity_ordered,distance_in_kms and test your program
bill_amount=calculate_bill_amount("N",2,7)
print(bill_amount)


############################################################################################################################


ASS 20:
#PF-Assgn-20

def calculate_loan(account_number,salary,account_balance,loan_type,loan_amount_expected,customer_emi_expected):
    eligible_loan_amount=0
    bank_emi_expected=0
    eligible_loan_amount=0
    #Start writing your code here
    #Populate the variables: eligible_loan_amount and bank_emi_expected
    if account_number>999 and account_number<2000:
        if account_balance>99999:
            if loan_type=='Car' and salary>25000:
                if loan_amount_expected<=500000 and customer_emi_expected<=36:
                    eligible_loan_amount=500000
                    bank_emi_expected=36
                    print("Account number:", account_number)
                    print("The customer can avail the amount of Rs.", eligible_loan_amount)
                    print("Eligible EMIs :", bank_emi_expected)
                    print("Requested loan amount:", loan_amount_expected)
                    print("Requested EMI's:",customer_emi_expected)
                else:
                    print("The customer is not eligible for the loan")
            
            elif loan_type== 'House' and salary>50000:
                if loan_amount_expected<=6000000 and customer_emi_expected<=60:
                    eligible_loan_amount=6000000
                    bank_emi_expected=60
                    print("Account number:", account_number)
                    print("The customer can avail the amount of Rs.", eligible_loan_amount)
                    print("Eligible EMIs :", bank_emi_expected)
                    print("Requested loan amount:", loan_amount_expected)
                    print("Requested EMI's:",customer_emi_expected)
                else:
                    print("The customer is not eligible for the loan")
                
            elif loan_type=='Business' and salary>75000:
                if loan_amount_expected<=7500000 and customer_emi_expected<=84:
                    eligible_loan_amount=7500000
                    bank_emi_expected=84
                    print("Account number:", account_number)
                    print("The customer can avail the amount of Rs.", eligible_loan_amount)
                    print("Eligible EMIs :", bank_emi_expected)
                    print("Requested loan amount:", loan_amount_expected)
                    print("Requested EMI's:",customer_emi_expected)
                else:
                   print("The customer is not eligible for the loan")
                
            else:
                print ("Invalid loan type or salary")
                
                
                
                
                
                
        else:
            print("Insufficient account balance")
    
    
    else:
        print("Invalid account number")
            
                
        
                
                
                
            
        

    #Use the below given print statements to display the output, in case of success
    #print("Account number:", account_number)
    #print("The customer can avail the amount of Rs.", eligible_loan_amount)
    #print("Eligible EMIs :", bank_emi_expected)
    #print("Requested loan amount:", loan_amount_expected)
    #print("Requested EMI's:",customer_emi_expected)

    #Use the below given print statements to display the output, in case of invalid data.
    
    
    
    
    
    
    
    
    #print("Insufficient account balance")
    #print("The customer is not eligible for the loan")
    #print("Invalid account number")
    #print("Invalid loan type or salary")
    # Also, do not modify the above print statements for verification to work


calculate_loan(1001,40000,250000,"Car",300000,30)
############################################################################################################################




ASS 21 DAY 2




#PF-Tryout

def generate_next_date(day,month,year):
    #Start writing your code here
    next_day=0
    next_month=0
    next_year=0
    if month==1 or month==3 or month==5 or month==7 or month==8 or month==10:
        if day>0 and day<31:
            next_day=day+1
            next_month=month
            next_year=year
        else:
            next_day==1
            next_month=month+1
            next_year=year
            
    elif month==2 and (year%400!=0):
        if day>0 and day<=27:
            next_day=day+1
            next_month=month
            next_year=year
        else:
            next_day==1
            next_month=month+1
            next_year=year
    
    elif month==2 and (year%400==0):
        if day>0 and day<=28:
            next_day=day+1
            next_month=month
            next_year=year
        else:
            next_day=1
            next_month=month+1
            next_year=year
            
    elif month==4 or month==6 or month==9 or month==11:
        if day>0 and day<=29:
            next_day=day+1
            next_month=month
            next_year=year
        else:
            next_day=1
            next_month=month+1
            next_year=year
        
    elif month==12:
        if day>0 and day<31:
            next_day=day+1
            next_month=month
            next_year=year
        else:
            next_day==1
            next_month=1
            next_year=year+1


    print(next_day,"-",next_month,"-",next_year)


generate_next_date(30,6,2015)
